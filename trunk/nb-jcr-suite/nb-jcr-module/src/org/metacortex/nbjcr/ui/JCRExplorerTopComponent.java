/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.metacortex.nbjcr.ui;

import java.beans.IntrospectionException;
import java.net.MalformedURLException;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.util.logging.Logger;
import javax.jcr.Credentials;
import javax.jcr.LoginException;
import javax.jcr.NoSuchWorkspaceException;
import javax.jcr.Repository;
import javax.jcr.RepositoryException;
import javax.jcr.RepositoryFactory;
import javax.jcr.Session;
import javax.jcr.SimpleCredentials;
import org.apache.jackrabbit.rmi.repository.URLRemoteRepository;
import org.exoplatform.services.jcr.rmi.api.client.ClientRepositoryFactory;
import org.metacortex.nbjcr.model.SessionNode;
import org.openide.util.Exceptions;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;
import org.openide.util.ImageUtilities;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.explorer.ExplorerManager;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(dtd = "-//org.metacortex.nbjcr.ui//JCRExplorer//EN",
autostore = false)
public final class JCRExplorerTopComponent extends TopComponent implements ExplorerManager.Provider {

    private static ExplorerManager manager = new ExplorerManager();

    private static JCRExplorerTopComponent instance;
    /** path to the icon used by the component and its open action */
    static final String ICON_PATH = "org/metacortex/nbjcr/resources/database-network_16x16.png";
    private static final String PREFERRED_ID = "JCRExplorerTopComponent";

    public JCRExplorerTopComponent() {
            initComponents();
            setName(NbBundle.getMessage(JCRExplorerTopComponent.class, "CTL_JCRExplorerTopComponent"));
            setToolTipText(NbBundle.getMessage(JCRExplorerTopComponent.class, "HINT_JCRExplorerTopComponent"));
            setIcon(ImageUtilities.loadImage(ICON_PATH, true));
        try {
            //
            //        try {
            //            Repository repository = new URLRemoteRepository("http://localhost:8080/rmi");
            //            manager.setRootContext(new SessionNode(repository.login()));
            //        } catch (RepositoryException ex) {
            //            Exceptions.printStackTrace(ex);
            //        } catch (IntrospectionException ex) {
            //            Exceptions.printStackTrace(ex);
            //        } catch (MalformedURLException ex) {
            //            Exceptions.printStackTrace(ex);
            //        }
            //

            ClientRepositoryFactory factory = new ClientRepositoryFactory();
            Repository repository = factory.getRepository("//localhost:9999/repository");
            Credentials credentials = new SimpleCredentials("root", "gtn".toCharArray());
            Session session = repository.login(credentials, "portal-system");
            
            manager.setRootContext(new SessionNode(session));
        } catch (IntrospectionException ex) {
            Exceptions.printStackTrace(ex);
        } catch (LoginException ex) {
            Exceptions.printStackTrace(ex);
        } catch (NoSuchWorkspaceException ex) {
            Exceptions.printStackTrace(ex);
        } catch (RepositoryException ex) {
            Exceptions.printStackTrace(ex);
        } catch (ClassCastException ex) {
            Exceptions.printStackTrace(ex);
        } catch (MalformedURLException ex) {
            Exceptions.printStackTrace(ex);
        } catch (NotBoundException ex) {
            Exceptions.printStackTrace(ex);
        } catch (RemoteException ex) {
            Exceptions.printStackTrace(ex);
        }

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        beanTreeView1 = new org.openide.explorer.view.BeanTreeView();
        jToolBar1 = new javax.swing.JToolBar();
        jButton1 = new javax.swing.JButton();

        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/metacortex/nbjcr/resources/database-network_16x16.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jButton1, org.openide.util.NbBundle.getMessage(JCRExplorerTopComponent.class, "JCRExplorerTopComponent.jButton1.text")); // NOI18N
        jButton1.setFocusable(false);
        jButton1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 232, Short.MAX_VALUE)
            .addComponent(beanTreeView1, javax.swing.GroupLayout.DEFAULT_SIZE, 232, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(beanTreeView1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private org.openide.explorer.view.BeanTreeView beanTreeView1;
    private javax.swing.JButton jButton1;
    private javax.swing.JToolBar jToolBar1;
    // End of variables declaration//GEN-END:variables
    /**
     * Gets default instance. Do not use directly: reserved for *.settings files only,
     * i.e. deserialization routines; otherwise you could get a non-deserialized instance.
     * To obtain the singleton instance, use {@link #findInstance}.
     */
    public static synchronized JCRExplorerTopComponent getDefault() {
        if (instance == null) {
            instance = new JCRExplorerTopComponent();
        }
        return instance;
    }

    /**
     * Obtain the JCRExplorerTopComponent instance. Never call {@link #getDefault} directly!
     */
    public static synchronized JCRExplorerTopComponent findInstance() {
        TopComponent win = WindowManager.getDefault().findTopComponent(PREFERRED_ID);
        if (win == null) {
            Logger.getLogger(JCRExplorerTopComponent.class.getName()).warning(
                    "Cannot find " + PREFERRED_ID + " component. It will not be located properly in the window system.");
            return getDefault();
        }
        if (win instanceof JCRExplorerTopComponent) {
            return (JCRExplorerTopComponent) win;
        }
        Logger.getLogger(JCRExplorerTopComponent.class.getName()).warning(
                "There seem to be multiple components with the '" + PREFERRED_ID
                + "' ID. That is a potential source of errors and unexpected behavior.");
        return getDefault();
    }

    @Override
    public int getPersistenceType() {
        return TopComponent.PERSISTENCE_ALWAYS;
    }

    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    Object readProperties(java.util.Properties p) {
        if (instance == null) {
            instance = this;
        }
        instance.readPropertiesImpl(p);
        return instance;
    }

    private void readPropertiesImpl(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    @Override
    protected String preferredID() {
        return PREFERRED_ID;
    }

    public ExplorerManager getExplorerManager() {
        return manager;
    }
}
